---
layout: post
title: PYTHON网络编程
date: 2018-12-22 18:11:11.000000000 +09:00
tags: python 网络编程 多线程/进程/协程
---

# pyhon进阶：
### 导出为pdf可能每页内容可能有点乱
### 重要为🍅
### 次重要为🍎
### 思考为🥔
### 没有标示为普普通通
------------------------------------------------
# linux

## liux操作系统

1. 操作系统（Operation System，OS）是管理硬件和控制软件运行的计算机程序, 是直接运行在“裸机”上的系统软件, 任何其他软件都必须在操作系统的支持下才能运行.
2. 主要作用是向下控制硬件向上支持软件的运行，具有承上启下的作用.
3. 大量的软件都直接依赖于操作系统的支持.
4. Linux 在服务器领域的应用是其重要分支.相比 Windows Server, Linux 具有免费、稳定、高效的特点. Linux 在服务器领域的占用率大大高于 Windows Server.

### linux诞生
- 1973 年初, 美国的 Thompson 和 Ritchie 使用 C 语言开发了 Unix 操作系统


	![](/assets/mdimg/unix之父.png)

- 由于 Unix 版权问题, 大学不能再使用 Unix 源代码. 荷兰的 Andrew S. Tanenbaum (塔能鲍姆) 教授为了教学于 1987 年自行开发与 UNIX 兼容的 Minix 操作系统.

	![](/assets/mdimg/塔能鲍姆.jpg)

- 1991 年, 林纳斯(Linus) 就读于赫尔辛基大学期间, 受到 Minix 的影响, 并在 Minix 操作平台建立了一个新的操作系统的内核, 他把它叫做 Linux.


	![](/assets/mdimg/Linus.jpg)

#### 内核
- 概念：
	* 内核, 是一个操作系统的核心. 是基于硬件的第一层软件扩充, 提供操作系统的最基本的功能, 是操作系统工作的基础.

	* 它负责管理系统的进程、内存、设备驱动程序、文件和网络系统，决定着系统的性能和稳定性.

	![](/assets/mdimg/Linux内核.png)

### 🍎linux文件操作

```
touch(文件名) :创建文件
rm (文件名)：删除文件
rm -r (文件夹名称) ：可以删除空的文件夹，也可以删除非空的文件夹
mkdir （文件夹名称）:创建文件夹
rmdir （文件夹名称）:删除文件夹 ：只能删除空的文件夹（不过用的较多的还是rm -r)
cp (要复制的文件路径) (要复制到的位置) ：从一个目录复制一个文件到另外一个目录
cp - i (要复制的文件路径) (要复制到的位置) ：复制的时候如果目录存在，会打印提示信息
clear :清空终端内容
tree :树状显示文件夹中的内容
mv (文件夹路径)(要移动到的路径) ：将一个文件夹移动到另外一个文件夹
mv (原文件件名)(要改为的文件名) ：重命名 ：如果本地有同名文件，将会直接替换
cd ~ : 回到家目录
cd - : 切换到上一次所在的目录
命令 --help : 查看帮助文件
man 命令 ： 帮助文档
	
$ tree -a          //显示所有文件和目录。
$ tree -d         //显示目录名称而非内容
$ tree -L 2      //这个命令是比较实用的，后面的数字2代表几层
```

- 在当前目录的文件夹中创建一个文本文档
	* touch ./A/a.txt

- 将一个文件夹复制到另外一个文件夹
	* cp -r A B

### 扩展的命令😢

```
mkdir .（文件夹名称） :将会创建一个隐藏的文件夹
cd .(文件夹名称) ： 将会进入隐藏文件夹 
ls -a ：可以显示所有文件，包括隐藏的文件
ls -l ：可以查看文件的信息 前缀为d是文件夹 前缀为-是文件 前缀后面三个为用户权限，后面三个为不再这个组的权限
ll ：同上，还可以显示隐藏信息（mac不可用）
l -al or l -la : 同上（mac使用）
mkdir -p (多级文件夹) ：创建多级文件夹
rm -f (文件名称) : 删除文件的时候如果文件不存在不提示
cp -v :显示复制信息
mv -i ：显示提示信息
```

### 重定向：

```
    ls > a.txt : 把当前目录下的信息输出到一个文件中（原先输输出到屏幕）
    cat a.txt : 查看这个文件中的内容
    ls >> a.txt : 把内容追加到一个文件中
    more a.txt : 同上
```

### 链接：

* linux可以创建快捷方式
	* 软链接文件
		* ln -s 文件名 快捷方式名
		* 两个指向同一个内存：在其中一个删除两个都会变
		* 删除其中一个，另外一个内容会被清空
		* b 文件直接指向 a 文件
	* 硬链接文件
		* ln 文件名 新文件名
		* 就是python中的引用
		* 只能链接文件，不能链接文件夹
		* 更改的时候两个都会变，删除的时候没被删除的不变
		* b 指向的是 a 的引用

### grep文件内容查询：
```
grep 'a' a.txt ：在a.txt中查找 a 
	
grep -n 'a' a.txt : 显示行号
	
grep -n '^a' a.txt : 查找以a开头的数据
	
grep -n 'a$' a.txt : 查找以a结尾的数据
	
grep -n '[abc]' a.txt : 查找包含中括号数据中的内容的数据=(a或者b或者c)
[]中括号就是或者的意思
	
grep -n 't.t' a.txt : 匹配任意一个字符
🥔. 点就代表拿个字符
```

### 管道
```
ls | grep 'a.txt' :将文件存到管道中，然后使用正则进行过滤
```
### 相对路径 ：光标所处的位置

### 绝对路径：根目录开始

## linux文件操作2

### find文件查询
```
需求：grep只能查询当前目录第一级
find是整个目录的遍历
```

### find ./ -name 'a.txt' (find 查询的目录名 查询的方式 匹配的正则)

```
* 代表0个或者多个任意字符
    find ./ -name '*.txt'
? 代表任意一个字符(没有排序功能)
    find ./ -name 'day0?'
[] 或者
    find ./ -name '[ab].txt'(a.txt或者b.txt)
```

### 压缩 解压缩

```
- c 生成档案文件
- v 显示压缩过程
- f 不可省略
- x 解压缩
- z 代表gz格式
```

### gz格式

### 打包：tar -cvf girl.tar girl

```
 压缩：gzip girl.tar
 一键压缩：tar -zcvf girl.tar.gz girl（压缩名字 文件夹名称）
 简洁版压缩：tar -zcvf girl.tar girl(同样可以解压，但是解压很费劲，不提倡)
 解压缩：tar -zxvf girl.tar.gz
 解压到特定的目录：tar -zxvf girl.tar.gz -C B
```

### bz2格式
```
压缩：tar -jcvf girl.tar.bz2 girl
解压：tar -jxvf girl.tar.bz2
```

### zip格式(压缩大小会低很多，但是windows可以兼容)
```
压缩：zip -r girl.zip girl(压缩文件夹，如果不加-r压缩之后会是一个空包)
解压：unzip girl.zip
```

### 修改文件权限

#### [ u/g/o/a ]含义
```
u user 表示该文件的所有者
g grop 用户组
o other 表示其他以外的人
a all 所有人
w write 写
r read 读
x excute 执行
+ 增加权限
- 撤销权限
= 设定权限 (相当于变量的赋值)
```

#### chmod 修改权限（字母法）
```
chmod u+x (文件名)
```

#### chmod 修改权限 （数字法）
```
r = 4
w = 2
x = 1
没权限=0
所有权限 = 7
chmod 777 （文件名）所有组，所有权限
chmod 700  (文件名) 用户组，所有权限
---------------------------------
🍅推荐字母法
```

### 其他

#### 查看命令的位置
```
which 命令 ：查看命令所在位置
```
#### 最高权限
```
sudo -s
exit 退出权限
```
#### 当前用户
```
whoami
```
#### 更改密码
```
sudo passwd 用户名
```
#### 查看所有用户
```
who
```
#### format 恢复

#### 远程
```
scp 从哪里复制 复制到哪里
文件夹加上-r
```

# 网络编程

### 🥔vim扩展：

```
vim -On能同时打开多个文件
```

- 理论
	*  一些相互连接的、以共享资源为目的、自治的计算机的集合.

### IP地址

- IP 地址是指互联网协议地址（英语：Internet Protocol Address，又译为网际协议地址）, 是 IP Address 的缩写. IP 地址是 IP 协议提供的一种统一的地址格式.
- 🥔🥔理解
	* IP 地址被用来给 Internet 上的电脑一个编号。
- 查看和设置IP地址：
	* linux下使用ifconfig命令来查看和配置网卡的IP地址
	* windows下使用ipconfig
- 检查网络的连通性
	* 通过ping命令查看网络的连通性

### 端口

- 端口的作用
	* 端口是操作系统分配给网络应用程序的编号, 当接收到数据之后, 操作系统会根据编号来将数据转发到对应编号的应用程序.
	* 网络程序必须要有端口号.
- 端口号
	* 端口号就是标识端口的一个编号. 在 Linux 系统中, 端口号在 0-65535 之间. 端口号不是随意使用的, 而是按照一定的规定(操作系统规定)进行分配. 端口号分:
		1. 知名端口号。
		2. 动态端口号.
- 查看端口号
	* 用 netstat -an | grep ":8080" 检验本机各端口的网络连接情况.
	* 用 lsof -i [tcp/udp]:8080 列出当前系统端口所对应的程序. 

### IP，端口总结：

	IP 用于标示网络设备的唯一标识
	Port 网络应用的唯一标识
	
## UDP

- 概念
	* UDP 英文全拼 (User Datagram Protocol) 简称用户数据报协议， 它是无连接的、不可靠的网络传输协议.

### UDP 特点
* 查看哪些端口被占用： netstat -n
* 1. 无连接
* 2. 资源开销小
* 3. 传输速度快
* 4. udp每个数据包最大是64K

### UDP优缺点
1. 优点:
	* 传输速度快
	* 不需要连接，资源开销小
2. 缺点:
	* 传输数据不可靠，容易丢数据包
	* 没有流量控制，当对方没有及时接收数据，发送方一直发送数据会导致缓冲区数据满了，电脑出现卡死情况，所有接收方需要及时接收数据。

### socket
- 理论：
	* socket(简称 套接字) 是进程间通信一个工具，它能实现把数据从一方传输到另外一方，完成不同电脑上进程之间的通信， 它好比数据的搬运工。
	* 🥔🥔就是实现不同进程之间的通信

### UDP网络程序流程
1. 创建udp套接字(socket.socket(socket.AF_INET, socket.SOCK_DGRAM))
2. 绑定端口：bind()
2. 发送/接收数据（发送：sendto().  接收:recvfrom(一次接收多少字节).）
3. 关闭套接字	:close()

### 初始化

```python
（代表ipv4:socket.AF_INET , 代表udp:socket.SOCKET_DGRAM）
```

### UDP网络程序流程
* UDP网络程序发送数据不需要建立数据

```
打包：encode
拆包：decode
```

### UDP广播
* 设置允许广播

```python
udp_sock.setsockopt(socket.SOL_SOCKET,socket.SO_BROADCAST,True)
```


## TCP

#### 特点
```
有连接
可靠传输：采用应答机制，必须对象给响应才能正常通信
连接一对一，不适用广播的应用程序
超时重新传
错误校验：验证数据包
流量控制和阻塞管理：避免主机发送的过快，客户机收不过来
首先需要校验
```

### 优点
* 可靠：可以得出其他特点
* 稳定

### 缺点
* 传输速度慢
* 占用系统资源高

### 应用场景
* 网站开发，保证数据可靠
* 文件传输


### TCP 以数据流形式发送代码

### TCP流程：客户端
1. 初始化：socket () ：


```python
（代表ipv4:socket.AF_INET , 代表tcp:socket.SOCKET_STREAM）
```
2. 连接: connect()
3. 发送：send（）
4. 接收：recv（）
5. 关闭：close（）


![](/assets/mdimg/屏幕快照 2018-12-18 上午10.49.04.png)

![](/assets/mdimg/屏幕快照 2018-12-18 上午9.21.27.png)

### TCP流程：服务器端

#### 初始化：
1. 初始化：socket () ：两个参数


```python 
(ipv4:socket.AF_INET, 代表tcp:socket.SOCKET_STREAM)
```

3. 绑定端口：bind ()
4. 监听：等待:listen（）：128代表系象征意义，现在按内存数来算
5. 接听：同意接收：accept（）返回一个元组：cilent:给客户端服务的对象  address：客户端地址


#### 传输：

1. 接收：recv（）
2. 发送：send（）
3. 关闭：close（）

#### 重新使用端口：循环发送与接收

![](/assets/mdimg/屏幕快照 2018-12-18 下午2.37.25.png)

```python
# 重新使用端口，这个一定要在绑定之前写
socket.socket(socket.SOL_SOCKET,socket.SO_REUSEADDR,True)
```

#### 🍅服务器端与客户端：总结
1. 服务器端需要绑定端口
2. 客户端不需要进行端口绑定
3. 如果客户端关闭了，那么我们服务器会接收空的信息NONE
 

### 🍎🍎三次握手：
#### 标志位
1. SYN：表示连接请求
2. ACK：标示确认
3. FIN：标示关闭连接
4. Seq：表示报文序号
5. ack：表示序号


![](/assets/mdimg/屏幕快照 2018-12-18 下午3.20.08.png)

```
tcp是可靠的传输，因为客户端在连接服务器端时使用三次握手，三次握手分别客户端与服务器端都做了一次数据的确定，保证客户端跟服务器端是通的
作用：
	分别三次确认！！！
```

### 四次挥手：
```
客户端关闭的时候做了四次挥手，
保证关闭的可靠性
客户端做了一次关闭的请求
服务器资源处理完以后也做了一个关闭的请求
也进行一次确认
双方都确认以后才会关闭
```

![](/assets/mdimg/屏幕快照 2018-12-18 下午3.50.52.png)

#### 作业：

![](/assets/mdimg/屏幕快照 2018-12-18 下午3.06.30.png)

####  聊天器多任务版

# 🍅多线程/进程/协程
## 多线程
### 概念：
- 同一时间执行多个任务，每个人物可以理解成层现实生活中干的每个活
- 函数后加括号是引用函数的值
- 不加括号是引用函数
- target:对象
- 代码：


![](/assets/mdimg/屏幕快照 2018-12-18 下午4.20.40.png)

### 线程的步骤：
1. 导入模块
2. 加入任务
3. 开启任务

### 🥔🥔理解：

![](/assets/mdimg/屏幕快照 2018-12-18 下午4.48.01.png)

```
如果主线程堵塞，所有线程都会堵住，如果副线程堵塞，对其他线程不影响
```
- 代码理解：

![](/assets/mdimg/屏幕快照 2018-12-18 下午4.50.50.png)

### 传参
- args:元组
- kwargs：字典


![](/assets/mdimg/屏幕快照 2018-12-18 下午5.09.51.png)

	- 传元组参数顺序必须一样
	- 传字典时参数名必须一致

### 拓展：函数专题
1. 
![](/assets/mdimg/屏幕快照 2018-12-18 下午5.15.47.png)

- 打印出来的是引用


![](/assets/mdimg/屏幕快照 2018-12-18 下午5.16.30.png)

2. 
![](/assets/mdimg/屏幕快照 2018-12-18 下午5.17.14.png)

- 调用

### 线程注意点
- 线程是无序的

- 主线程要等所有的子线程结束才结束

- 主线程死了，所有的子线程也会结束

- 线程之间共享全局变量

- 多线程中，如果其中哪一个线程出错，其他线程不会停止

![](/assets/mdimg/屏幕快照 2018-12-20 上午10.55.17.png)

![](/assets/mdimg/屏幕快照 2018-12-20 上午11.03.15.png)

### 🥔🥔守护线程理解：
- 主线结束即所有线程结束
- 当有多个子线程，但不是所有的字线程都是守护的，所有线程要等没有守护的线程结束才会结束
- 当有多个子线程的时候，没有守护的线程结束（程序结束），守护的线程也会结束

### 共享全局变量问题分析

- 线程共享全局变量会出错
- 原理：

- 计算num += 1：
- 总共三步：
- cpu去内存中获取num的值
- cpu对num值计算加1： 🍅此时内存中的值还没有变化
- cpu把计算完的值重新赋值给内存
### 拓展：
		* cpu执行没有顺序


### 🍅答案：

![](/assets/mdimg/屏幕快照 2018-12-20 下午3.05.23.png)

### 🍅共享全局变量问题解决

### 互斥锁：同性相斥

![](/assets/mdimg/屏幕快照 2018-12-20 下午3.11.38.png)

1. 将这三步锁上，形成一个对象
2. 判断多个线程之间对象是否相同
3. 如果相同，就把其他的都阻塞住
4. 当运行完之后，就会解锁，执行其他线程


### 🥔🥔总结：就是产生多个相同的对象，在当前线程没结束之前，所有相同对象的进程都会被锁住！

### 添加互斥锁过程：
1. 创建互斥锁
2. lock = threading.Lock()
3. 加锁:加在需要加锁的代码上面和后面
4. 加锁：Lock.acquire()<——代码段——>lock.release()：解锁
5. 解锁
6. lock.release()

#### 需要互斥的代码都必须加锁：而且必须是同一把锁
- 如果不是同一把锁，同样会出错
![](/assets/mdimg/屏幕快照 2018-12-20 下午3.47.05.png)

### 死锁：是一个BUG

#### 概念：
- 其中一个线程挂了：cpu无法结束判断当前进程已经结束，被锁住出不来了
- 实例代码：
![](/assets/mdimg/屏幕快照 2018-12-20 下午3.50.44.png)

#### 解决方法
- 🍅🍅在退出之前解锁

### 自定义线程
1. 创建一个类
2. 继承多线程类
3. 🍅🍅 重写run方法：方法名必须是run
![](/assets/mdimg/屏幕快照 2018-12-20 下午4.15.10.png)

### 自定义线程传参：

![](/assets/mdimg/屏幕快照 2018-12-20 下午4.37.08.png)

### 并行与并发
#### 线程是cpu执行（调度）的单位
- 并发
	* 看上去像同时发生的（但是并不是同时运行的）

- 并行  
	* 🍎要有硬件支持：多核
	* 就是真的同时发生的

- 任务数大于核数也是并发
	* 🥔🥔比如双核，执行三个线程，也是并发

	
### 线程有BUG：
- 如果只用线程做不到并行：不能充分的利用cpu
- gil问题 全局 解释器锁
- 🥔🥔所以要去学习进程：进程可以充分利用cpu

### 多线程最根本的问题

- 🍅就是解决了主线程被阻塞的问题
- 🥔当主线程在被阻塞时，而又需要继续跑多线程，那么就需要多线程来解决问题
- 🥔哪个方法堵住了，就在哪加线程

## 进程
	单词收集：
		current：当前的

### 可以充分利用cpu
- 🍅gil:全局解释器锁
- 进程：通俗理解一个运行的程序或者软件，进程时操作系统的资源分配的基本单位
- 线程是cpu进行调度的单位
- 🍅：线程做任务，进程用来申请资源（内存）
- 🥔干活的是线程，申请资源的是进程
- 线程是cpu进行调度的单位
- 程序只要开启就有一个进程，进程内包含一个线程
- 程序验证：

![](/assets/mdimg/屏幕快照 2018-12-21 上午10.06.28.png)

![](/assets/mdimg/屏幕快照 2018-12-21 上午10.07.00.png)

### 怎么写：

```python
# 导入
import multiprocessing 

#加入任务
A = multiprocessing.Process(target=函数名1）
B = multiprocessing.Process(target=函数名2）

# 开启
A.start()
B.start()
```

### 传参：与多线程一样
- args：传元组
- kwargs：传字典

### 进程的状态

![](/assets/mdimg/屏幕快照 2018-12-21 上午10.10.30.png)

- 调度
	* 调用进程里面的线程
- 进程缺陷
	* 开了多个进程后可能会造成资源浪费

### 每一个进程中，第一个线程都是主线程

### 🍎进程全局变量问题
	- 进程之间不共享全局变量 
- 🍅🍅进程如果想要共享全局变量
	* 队列：操作系统提供的一块公共的区域，使进程可以在队列中进行通讯
	* 进程一将数据存入队列中，进程二可以直接从队列中取出来

	![](/assets/mdimg/屏幕快照 2018-12-21 上午10.50.15.png)
	
#### 🍎队列
	1. 队列是先进先出
	2. 取完数据，队列中的数据就没了
	3. 如果添加超过了定义的最大的数据量，会进行阻塞，不会报错
	4. 如果队列中的数据为空，那么再取会进行阻塞，不会报错
	5. queue.qsize():判断队列中还有多少数据

- 代码实现

	```python
	#导入
	import multiprocessing
	
	# 定义一个队列
	# 最大放三个数据
	multiprocessing.Queue(3)  # 如果括号内不写数据，默认为最大值
	
	# 放数据
	queue.put(1)
	queue.put("2")
	queue.put(3)
	
	# 判断队列中还有多少数据
	print("个数",queue.qsize())
	
	# 取数据
	print(queue.get())
	print(queue.get())
	print(queue.get())
	
	# 打印出的数据
	>> 个数 3
	>> 1
	>> 2
	>> 3
	```
	
### 队列有BUG
	 get_nowait/put_nowait：不等待直接放进去/不等待直接放进去
	 如果不能放数据了直接报错
	 如果没有数据了再取直接报错
	 🍅这些方法有bug，尽量不要去用
	 
### 进程池pool
#### 概念：
- 池子里面放的是进程，进程池会根据任务执行情况自动创建进程，而且尽量少创建进程，合理利用进程池中的进程完成多任务
- 🥔通俗的讲就是重复的利用进程
- 减少我们的资源

### 代码：

```python
# 进程池的作用就是重复使用进程
# 循环创建是个进程做事情
# 复制
# 如果不是用进程池，每个进程都不重复

import multiprocessing
import time

from gevent import os


def copy():
    print("copy-----")
    print(os.getpid())  # 查看当前进程pid
    time.sleep(1)


def main():
    # 创建10个进程做事情
    # 最大三个线程同时运行
    pool = multiprocessing.Pool(3)
    for temp in range(10):
        # multiprocessing.Process(target=copy).start()
        # 加入任务
        # 同步进程池
        pool.apply(copy)


if __name__ == '__main__':
    main()
```

### 步骤：
1. 创建进程池
2. 加入任务
3. 告诉主线程等待子线程

### 同步/异步
1. 第一种方案：apply()：同步进程池
		- 问题：就是变成了单线程：🍎平时工作不用

![](/assets/mdimg/屏幕快照 2018-12-21 下午2.50.02.png)

2. 第二种方案：apply_async()：异步需要进行等待
	- 问题：主进程会直接结束
	- 解决：下面两个必须写
		- pool.close():告诉主进程我不在添加其他任务了
		- pool.join() :让我们的主进程等等（等待）
	- 解决之后会多个进程一起跑


			
### 进程的注意点
1. 主进程会等待子进程结束而结束
	🥔主线程代码执行结束，会等待子进程结束，才会结束子进程
2. 销毁子进程

```python
# 关闭进程
terminate()  # 关闭进程
	
# 打印PID
print(os.getpid())  # 打印pid
	
# 进程是由哪个进程创建的
print(os.ppid())
```
	
#### 🍎命令行杀死进程
	$ ps -aux 查看进程
	$ ps -aus | grep "python" ：查看python名称的程序
	$ kill -9 PID ：杀死进程
	- 如果直接杀死主进程，所有子进程也会停止

#### 拓展：
	$ os.system("ls") # 查看所在目录所有文件
	$ os.system("mkdir AAA")  # 创建一个文件夹
	$ os.system("kill -9 PID")  # 杀死一个进程
	思考；能不能查看本地正在播放的音乐的音乐名称和歌手

#### 进程与线程的区别
	1. 两者都能完成多任务
	2. 进程是操作系统分配资源的单位
	3. 线程是cpu调度的单位
	4. 进程不共享全局变量
	5. 线程共享全局变量
	6. 进程使用内存比线程大

#### 作业：
	<文件夹的复制copy>
	1. 新建文件夹
	2. 得到目录
	3. 打开目录
	4. 打开文件
	5. 读取文件
	6. 写到另外一个位置
	7. 使用循环
	8. 如何让性能提高，使用多任务
	9. 写多任务之前先写单任务

## 协程
	单词收集：
	1. spawn：大量产卵/孵化

	
### 协程代码实现
```python
# 跳舞
# 1. 导入
# 2. 加入任务
# 3. 等待

# 1.导入
def dance():
	while True:
		print("跳舞“）
		
def main():
	"""协程"""	
	# 2. 加入任务
	spawn_dance = gevent.spawn(dance)
	
	# 3. join()------->等待
	spawn_dance.join()

-------------------------------------
```

### 协程靠解释器切换:只要遇到耗时的就会自动切换，如果代码不耗时就不会自动切换
- 切换方法1：
	
		import gevent
		-----------------
		gevent.sleep(时间)

- 切换方法2:
	
	```python
	# 导入
	import gevent
	# 请猴子
	from gevent import monkey
	
	# 打补丁:打补丁以后就可以使用time.sleep()
	monkey.patch_all()
	
	# 使用time.sleep()
	time.sleep()
	```
- 🍅🍅注意不能直接使用time.sleep()

- 切换方法3:

	```python
	# 创建一个空列表
	spawn_list = list()
	.........................
	# 加入列表中
	spawn_list.append(函数名)
	.........................
	# 等待列表
	gevent.joinall(spawn_list)
	```
	
### 协程使用的步骤
1. 导入
2. 请猴子打补丁
3. 加入到任务列表中
4. 等待列表

### 协程传参

```python
# 传参：第一个是任务，第二个及以后都是参数
gevent.spawn(函数名，"参数1“，”参数2“......"参数n")
```

### 🍅🍅协程是在线程里面的
- 关系
	- 一个程序开启就有一个进程，一个进程自带一个线程，线程中包含协程

	
	
<section class="post-comments">
  {% if site.comment.disqus %}
    <div id="disqus_thread"></div>
    <script>
    
    var disqus_config = function () {
        this.page.url = "{{ page.url | prepend: site.baseurl | prepend: site.url }}";
        this.page.identifier = "{{ page.url }}";
    };

    var disqus_shortname = '{{ site.comment.disqus }}';
    
    (function() { // DON'T EDIT BELOW THIS LINE
        var d = document, s = d.createElement('script');
        s.src = '//' + disqus_shortname + '.disqus.com/embed.js';
        s.setAttribute('data-timestamp', +new Date());
            (d.head || d.body).appendChild(s);
        })();
    </script>
    <noscript>要查看<a href="http://disqus.com/?ref_noscript"> Disqus </a>评论，请启用 JavaScript</noscript>
    
  {% elsif site.comment.duoshuo %}
    <div class="ds-thread" data-thread-key="{{ page.url }}" data-title="{{ page.title }}" data-url="{{ page.url | prepend: site.baseurl | prepend: site.url }}"></div>
    <script type="text/javascript">
        var duoshuoQuery = {short_name:"{{ site.comment.duoshuo }}"};
        (function() {
            var ds = document.createElement('script');
            ds.type = 'text/javascript';ds.async = true;
            ds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js';
            ds.charset = 'UTF-8';
            (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(ds);
        })();
    </script>
  {% endif %}
  
  
  
</section>

